### Document the process of creating the Web Components.

## Steps I used to create the BookPreview Web Component

# Define the Custom Element

- I defined the BookPreview component by extending the HTMLElement class and using the customElements.define() method to register the component. The name of the component must contain a hyphen (e.g., book-preview), which is a requirement for custom elements.

# Attach Shadow DOM

- Inside the constructor, I used the this.attachShadow({ mode: "open" }) method to create and attach a shadow DOM to the component and this encapsulates the component's styles and structure, preventing them from affecting other parts of the page and vice versa.

# Define the Component’s Template

- Within the connectedCallback() method (which is called when the element is added to the DOM), I used innerHTML to define the component's structure. I also included styling for the book preview card and its elements, such as the book image, title, and author.

# Attribute Handling

- I then retrieved the attributes (such as image, title, author, and id) from the custom element using this.getAttribute() and this allows you to dynamically populate the component's content when it is rendered on the page.

# Event Handling

- This component dispatches a custom event (book-selected) when the user clicks on the book preview. This event contains the book's ID, allowing parent components (such as the main application) to handle the click and display more details about the selected book.

## Challenges Faced and Solutions

- The issue I was facing was, when I added global styles to the page, the shadow DOM prevented the component from inheriting these styles.
  I managed to fix it by explicitly defining the required styles within the shadow DOM and that provided control over the component's styling while maintaining encapsulation.

## How to Use the BookPreview Component

- Once the BookPreview component is defined, it can be used as a regular HTML element by including the custom tag <book-preview> in the HTML. Attributes such as image, title, author, and id must be set to provide the book data.
- The component can also be created dynamically using JavaScript, allowing you to programmatically generate book previews based on data (such as from an API or data file).
- The parent component or app needs to listen for the book-selected event, which is dispatched whenever a book is clicked. This allows you to respond to the user's selection (e.g., showing a modal with more book details).

## Rationale Behind Selecting Certain Elements for Conversion into Web Components

- Components that are used multiple times across the app (such as the book preview cards) were prime candidates for conversion. The goal was to create components that could be reused with different data without re-writing code for each instance.

- Example: The BookPreview component can be used to display book data anywhere in the app—on the homepage, in search results, or in the book detail section.

- Components that needed their own unique behavior or event handling (such as clicking on a card to trigger a detailed view) were also ideal candidates for Web Components. By encapsulating the behavior inside the component, event management becomes more straightforward.

- Example: The BookPreview component dispatches a custom event (book-selected) whenever a user clicks on the card. This event is easily handled by the parent app without needing to manage logic inside each instance of the component.

## Insights Gained: Advantages and Limitations of Using Web Components

# Advantages of Using Web Components

- Advantage: Web Components allow us to create self-contained, reusable components that can be used anywhere in the app. This eliminates redundancy and ensures that the code is modular and maintainable. When changes are needed, they can be made in one place, reducing the likelihood of bugs and inconsistencies.

- I noticed that once the BookPreview component was built, it could be easily reused across multiple sections of the app without the need to rewrite or duplicate the code.

# Limitations of Using Web Components

- Styling Limitations:

  - Limitation: The first thing that I noticed and also struggled a bit with was the styling section for my dark theme.
  - While the Shadow DOM is great for encapsulation, it can also make global theming (like dark mode) harder to implement across the app. Since each component is isolated, applying a consistent theme across multiple components requires additional effort.

  - So I fixed this issue by using CSS custom properties (variables) to make certain styles (like colors) more easily adjustable globally. This allowed me to spread theme changes to the Web Components by updating the CSS variables at the root level.
